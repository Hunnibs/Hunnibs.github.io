<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-05-25T00:20:13+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hunnibs</title><subtitle>About my work history &amp; review
</subtitle><author><name>&lt;Lee&gt; &lt;ByungHeon&gt;</name><email>&lt;cqqudgjs@hufs.ac.kr&gt;</email></author><entry><title type="html">[Java] 배열</title><link href="http://localhost:4000/categories/javastudy/2023-05-24-javaStudy-array/" rel="alternate" type="text/html" title="[Java] 배열" /><published>2023-05-24T00:00:00+09:00</published><updated>2023-05-25T00:08:01+09:00</updated><id>http://localhost:4000/categories/javastudy/javaStudy-array</id><content type="html" xml:base="http://localhost:4000/categories/javastudy/2023-05-24-javaStudy-array/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#1차원-배열-생성" id="markdown-toc-1차원-배열-생성">1차원 배열 생성</a></li>
  <li><a href="#2차원-배열-생성" id="markdown-toc-2차원-배열-생성">2차원 배열 생성</a></li>
  <li><a href="#배열을-활용한-제어문" id="markdown-toc-배열을-활용한-제어문">배열을 활용한 제어문</a></li>
</ul>
<hr />
<h3 id="1차원-배열-생성">1차원 배열 생성</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    int[] array = new int[100];  // 100개의 int형 변수를 저장해줄 수 있는 배열 생성
    int[] array2 = new int[] {1, 2, 3, 4}  // 배열 생성과 동시에 안에 값을 배정해주는 방식
    int[] array3 = {1, 2, 3, 4}  // 이런 방식으로도 가능하다. 
   
</code></pre></div></div>

<h3 id="2차원-배열-생성">2차원 배열 생성</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    int[][] array = new int[3][4]; // 3행 4열짜리 배열 생성
    
    int[][] array2 = new int[3][]; // 3행만 생성
    array2[0] = new int[3];  // 이런 식으로 따로 행 별로 배열 생성

    int[][] array3 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};  // 3행 3열짜리 값을 배정완료   
    
    // {}로 전체를 싸줘야하는데 그러면 Liquid Error가 발생해서 포스팅이 안된다..

</code></pre></div></div>

<h3 id="배열을-활용한-제어문">배열을 활용한 제어문</h3>

<p><strong>foreach문</strong></p>
<ul>
  <li>배열에서 차례대로 하나씩 꺼낸다고 생각하면 이해가 편함</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    int[] iarr = {10,20,30,40,50};

    for(int value:iarr){
        System.out.println(value);
    }

</code></pre></div></div>]]></content><author><name>&lt;Lee&gt; &lt;ByungHeon&gt;</name><email>&lt;cqqudgjs@hufs.ac.kr&gt;</email></author><category term="categories" /><category term="javaStudy" /><summary type="html"><![CDATA["배열"]]></summary></entry><entry><title type="html">[Jekyll] GitHub 블로그 개발일지(4)</title><link href="http://localhost:4000/categories/jekyll/2023-05-24-jekyll-error1/" rel="alternate" type="text/html" title="[Jekyll] GitHub 블로그 개발일지(4)" /><published>2023-05-24T00:00:00+09:00</published><updated>2023-05-25T00:20:13+09:00</updated><id>http://localhost:4000/categories/jekyll/jekyll-error1</id><content type="html" xml:base="http://localhost:4000/categories/jekyll/2023-05-24-jekyll-error1/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#41-상상치도-못한-error-발생" id="markdown-toc-41-상상치도-못한-error-발생">4.1 상상치도 못한 Error 발생</a></li>
  <li><a href="#42-error-해결과정" id="markdown-toc-42-error-해결과정">4.2 Error 해결과정</a></li>
</ul>
<h3 id="41-상상치도-못한-error-발생">4.1 상상치도 못한 Error 발생</h3>
<hr />
<ul>
  <li>로컬 환경 Error 내용
    <blockquote>
      <p>Liquid Exception: Liquid syntax error (line 23): Variable ‘{{1, 2, 3}}’ was not properly terminated with regexp: /}}/ in C:/Users/cqqud/Documents/GitHub/Hunnibs.github.io/categories/javaStudy/_posts/2023-05-24-javaStudy-array.md</p>
    </blockquote>
  </li>
  <li>Github page action Error 내용</li>
</ul>
<p align="center"><img src="\assets\img\jekyll\buildError.png" width="800px" height="300px" title="px(픽셀) 크기 설정" alt="BuildError" /></p>

<p>아무것도 건드린거 없이 포스팅만 추가했는데 Error가 발생했다. 아무것도 하지 않았는데 발생한 Error라 머리 속이 새하얘졌다.</p>

<h3 id="42-error-해결과정">4.2 Error 해결과정</h3>
<hr />
<ol>
  <li>
    <p>Error message에 나온 해당 파일에서만 문제가 발생하는지 확인부터 진행</p>

    <ul>
      <li>3개의 포스팅을 업로드 한 번에 업로드했어서 저 파일을 제외한 파일들을 올려봤다.</li>
    </ul>
  </li>
  <li>문제없이 포스팅이 되는 것을 확인한 후 Error message의 해당 줄을 확인
    <ul>
      <li>Code 작성과 관련된 부분이 었는데 중괄호를 두 번 쓴 것이 문제라는 것 같았다.</li>
    </ul>
  </li>
  <li>
    <p>해당 Error가 일어나는 이유를 구글링으로 찾아 해결</p>

    <ul>
      <li>Liquid라는 루비 기반의 템플릿 언어는 {{, }}를 escape 문자로 활용하기 때문에 Error가 발생하는 것</li>
    </ul>

    <p>참조 -&gt; <a href="https://iamheesoo.github.io/blog/gitblog-sol-jekyll02">iamheesoo 님 깃헙 블로그</a></p>
  </li>
  <li>
    <p>해결법</p>

    <p><img src="\assets\img\jekyll\sentence.png" alt="sentence" /></p>
    <ul>
      <li>이 해당 문구는 그냥 적으면 없애버려서 이미지 파일로 첨부해야한다.</li>
      <li>굉장히 불편한 부분</li>
    </ul>
  </li>
</ol>]]></content><author><name>&lt;Lee&gt; &lt;ByungHeon&gt;</name><email>&lt;cqqudgjs@hufs.ac.kr&gt;</email></author><category term="categories" /><category term="jekyll" /><summary type="html"><![CDATA["Liquid Exception: Liquid syntax error"]]></summary></entry><entry><title type="html">[Java] 연산자</title><link href="http://localhost:4000/categories/javastudy/2023-05-24-javaStudy-operator/" rel="alternate" type="text/html" title="[Java] 연산자" /><published>2023-05-24T00:00:00+09:00</published><updated>2023-05-24T16:32:24+09:00</updated><id>http://localhost:4000/categories/javastudy/javaStudy-operator</id><content type="html" xml:base="http://localhost:4000/categories/javastudy/2023-05-24-javaStudy-operator/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#산술연산자" id="markdown-toc-산술연산자">산술연산자</a></li>
  <li><a href="#비교연산자" id="markdown-toc-비교연산자">비교연산자</a></li>
</ul>
<hr />
<h3 id="산술연산자">산술연산자</h3>
<hr />
<ul>
  <li>+(더하기), -(빼기), *(곱하기), /(나누기), %(나머지)가 포함된다.</li>
</ul>

<blockquote>
  <p>❗ / 연산자 사용 시 변수형에 따른 데이터 저장</p>

  <p>int a, int b를 나누기 연산을 이용해서 나눴을 경우 저장되는 값은 int형으로 저장되므로 소수점 아래로 계산결과가 발생해도 반영되지 않는다. <br />
그러므로 이를 해결하기 위해 명시적형변환을 사용해 하나는 double 혹은 float형으로 바꾸어주어야한다.</p>
</blockquote>

<ul>
  <li>++, –
    <ul>
      <li>++a 혹은 a++이런 식으로 사용한다.</li>
      <li>ex) <br />
  b == ++a -&gt; 먼저 증가를 시킨 값을 a에 저장해주고 증가시킨 값을 b에 저장
  b == a++ -&gt; b에 a값을 저장해준 뒤 a 값을 증가</li>
    </ul>
  </li>
</ul>

<h3 id="비교연산자">비교연산자</h3>
<hr />
<ul>
  <li>==, !=, &gt;, &lt;가 포함된다.</li>
  <li>주로 조건문에서 대소비교 혹은 참 거짓을 판별할 때 많이 사용</li>
</ul>]]></content><author><name>&lt;Lee&gt; &lt;ByungHeon&gt;</name><email>&lt;cqqudgjs@hufs.ac.kr&gt;</email></author><category term="categories" /><category term="javaStudy" /><summary type="html"><![CDATA["연산자"]]></summary></entry><entry><title type="html">[Java] 제어문</title><link href="http://localhost:4000/categories/javastudy/2023-05-24-javaStudy-condition/" rel="alternate" type="text/html" title="[Java] 제어문" /><published>2023-05-24T00:00:00+09:00</published><updated>2023-05-24T17:25:26+09:00</updated><id>http://localhost:4000/categories/javastudy/javaStudy-condition</id><content type="html" xml:base="http://localhost:4000/categories/javastudy/2023-05-24-javaStudy-condition/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#if문" id="markdown-toc-if문">If문</a></li>
  <li><a href="#switch문" id="markdown-toc-switch문">Switch문</a></li>
  <li><a href="#while문" id="markdown-toc-while문">while문</a></li>
  <li><a href="#do-while문" id="markdown-toc-do-while문">Do-While문</a></li>
  <li><a href="#for문" id="markdown-toc-for문">for문</a></li>
</ul>
<hr />
<h3 id="if문">If문</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    if (조건식){
        실행문;
    }
    else if(조건식){
        실행문;
    }
    else{
        실행문;
    }

</code></pre></div></div>

<h3 id="switch문">Switch문</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    int value = 1;

    switch(value){
        case 1:
            실행문;
            break;  // 반드시 break문을 작성해줘야함
        case 2:  
        case 3:
        case 4:  // 이런식으로 케이스를 묶어서도 가능
            실행문;
            break;

        default:  // 아무것도 해당 안될 때 실행하는 케이스
            실행문;
            break;
    }

</code></pre></div></div>

<h3 id="while문">while문</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    while(조건식){
        실행문;
    }

</code></pre></div></div>

<h3 id="do-while문">Do-While문</h3>
<ul>
  <li>while문은 조건이 충족되지 않는다면 한 번도 실행하지 않지만 Do-while문을 사용하면 최소 한 번의 실행문 실행을 보장한다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    do{
        실행문;
    }while(조건문)

</code></pre></div></div>

<h3 id="for문">for문</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    for(초기화식; 조건식; 증감식){
        실행문;
    }

</code></pre></div></div>]]></content><author><name>&lt;Lee&gt; &lt;ByungHeon&gt;</name><email>&lt;cqqudgjs@hufs.ac.kr&gt;</email></author><category term="categories" /><category term="javaStudy" /><summary type="html"><![CDATA["제어문"]]></summary></entry><entry><title type="html">[Java] 변수</title><link href="http://localhost:4000/categories/javastudy/2023-05-23-javaStudy-variable/" rel="alternate" type="text/html" title="[Java] 변수" /><published>2023-05-23T00:00:00+09:00</published><updated>2023-05-24T23:41:27+09:00</updated><id>http://localhost:4000/categories/javastudy/javaStudy-variable</id><content type="html" xml:base="http://localhost:4000/categories/javastudy/2023-05-23-javaStudy-variable/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#기본-데이터-타입" id="markdown-toc-기본-데이터-타입">기본 데이터 타입</a></li>
  <li><a href="#type-형변환" id="markdown-toc-type-형변환">Type 형변환</a></li>
</ul>
<hr />
<h3 id="기본-데이터-타입">기본 데이터 타입</h3>
<hr />

<p><img src="\assets\img\javaStudy\DataTypes.png" alt="DataType" /></p>

<p>데이터 타입은 크게 논리형, 문자형, 정수형, 실수형으로 나누어진다.</p>

<p><strong>논리형</strong></p>
<ul>
  <li>true, false와 같은 참, 거짓을 판별하는 Data를 저장하는 변수</li>
  <li>1byte의 크기를 가진다.</li>
</ul>

<p><strong>문자형</strong></p>
<ul>
  <li>딱 하나의 문자만을 저장할 수 있는 변수, 하나 이상의 문자를 저장할 시 오류가 발생한다.</li>
  <li>2byte의 크기를 가진다.</li>
</ul>

<p><strong>정수형</strong></p>
<ul>
  <li>
    <p>Data 크기와 저장할 수 있는 값의 범위에 따라 다양하게 나뉜다.</p>

    <ul>
      <li>byte는 1byte로 가장 작은 크기이며 -128 ~ 127까지만을 저장할 수 있다.</li>
      <li>short와 char는 2byte의 크기를 가지며 short는 음수와 양수를 반반 씩, char는 양수범위만 저장한다.</li>
      <li>int는 4byte로 더 넓은 범위를 저장할 수 있다.</li>
      <li>long은 8byte로 웬만하면 모든 범위의 수를 저장할 수 있다.
        <ul>
          <li>단, 변수 선언시 long big = 234141515<em>L</em>로 L을 붙여줘야한다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><strong>실수형</strong></p>
<ul>
  <li>
    <p>소수점 아래 자리까지 저장할 수 있는 type으로 크기는 두 가지로 나뉜다.</p>

    <ul>
      <li>float은 4byte</li>
      <li>double 8byte</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>👉 상수</p>

  <p>기본 데이터 타입 앞에 final을 붙여서 불변성을 가진 data 저장공간을 만들 수 있다. <br />
ex) final int number = 3; 이면, number는 3이라는 값으로 고정된다.</p>
</blockquote>

<h3 id="type-형변환">Type 형변환</h3>
<hr />
<p>정수형과 실수형 사이에서는 Type 형변환이 가능하다. 이 때 정수는 실수에 포함된다는 사실을 기억해야한다.</p>

<ol>
  <li>묵시적 형변환
    <ul>
      <li>int형 변수를 float형으로 바꾸는 경우</li>
      <li>실수는 정수를 애초에 포함하고 있기 때문에 암묵적으로 변환을 해준다.</li>
    </ul>
  </li>
  <li>명시적 형변환
    <ul>
      <li>반대로 float형을 int형으로 바꾸는 경우</li>
      <li>float type 변수에 5와 같은 정수가 저장되어있더라도 변환이 불가능하다.</li>
      <li>그래서 이런 경우에는 강제로 형변환을 시도해주어야한다.</li>
      <li>ex)</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
     float number = 5;
     int number2 = (int)number;

</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name>&lt;Lee&gt; &lt;ByungHeon&gt;</name><email>&lt;cqqudgjs@hufs.ac.kr&gt;</email></author><category term="categories" /><category term="javaStudy" /><summary type="html"><![CDATA["변수"]]></summary></entry><entry><title type="html">[Jekyll] GitHub 블로그 개발일지(3)</title><link href="http://localhost:4000/categories/jekyll/2023-05-23-jekyll-nameError/" rel="alternate" type="text/html" title="[Jekyll] GitHub 블로그 개발일지(3)" /><published>2023-05-23T00:00:00+09:00</published><updated>2023-05-24T16:01:44+09:00</updated><id>http://localhost:4000/categories/jekyll/jekyll-nameError</id><content type="html" xml:base="http://localhost:4000/categories/jekyll/2023-05-23-jekyll-nameError/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#3-1-경로-설정-문제-발생" id="markdown-toc-3-1-경로-설정-문제-발생">3. 1 경로 설정 문제 발생</a></li>
  <li><a href="#3-2-문제-해결-방법" id="markdown-toc-3-2-문제-해결-방법">3. 2 문제 해결 방법</a></li>
</ul>
<h3 id="3-1-경로-설정-문제-발생">3. 1 경로 설정 문제 발생</h3>
<hr />
<ul>
  <li>이전 포스팅 내용에 이어지는 오류</li>
</ul>

<p>굉장히 갑작스러운 오류 발생이었다. <br />
Java를 공부하기 위해 공부내용을 정리할 포스팅 공간을 만들었는데 이전과 똑같이 directory를 추가하고 yml파일과 경로 설정을 해주고 서버에 올렸는데 화면이 뜨지 않는 문제점이 발생했다. 당황해서 로컬 환경에서 테스팅을 해봤지만 로컬 환경에서는 문제가 발생하지 않았다.</p>

<ul>
  <li>아래는 문제점이 발생한 상황</li>
</ul>

<p><img src="assets\img\jekyll\pathError2.png" alt="pathError" /></p>

<h3 id="3-2-문제-해결-방법">3. 2 문제 해결 방법</h3>
<hr />
<p>처음에는 해당 테마가 같은 문제가 계속 일어나 다른 테마로의 변경을 고민했었다. 하지만 마음에 드는 테마라 이 악물고 고치기로 결정 <br />
어이없게도 간단하게 해결했다.</p>

<ul>
  <li>이전에 Blog라는 path를 지정해줬을 때 문제가 생겼던 것 처럼 java라는 단어에 문제가 있을거라고 생각했다.</li>
  <li>
    <p>해당 포스팅 directory의 이름을 전부 javaStudy로 바꿔줬다 -&gt; 그래도 인식을 하지 못하는 문제가 발생</p>
  </li>
  <li>Url을 확인해보니 어째서인지 서버를 작동시키면 javaStudy경로가 javastudy로 나타난다.</li>
  <li>대문자를 인식못하는 것 같아 javastudy로 바꾸어주었더니 해당 문제가 해결되고 정상적으로 작동한다.</li>
</ul>]]></content><author><name>&lt;Lee&gt; &lt;ByungHeon&gt;</name><email>&lt;cqqudgjs@hufs.ac.kr&gt;</email></author><category term="categories" /><category term="jekyll" /><summary type="html"><![CDATA["Path 설정의 중요성(이전 포스팅 마지막에 추가되는 오류 사항)"]]></summary></entry><entry><title type="html">[SWEA] 1928_Base64 Decoder</title><link href="http://localhost:4000/categories/algorithm/2023-05-19-algorithm-SWEA_1928/" rel="alternate" type="text/html" title="[SWEA] 1928_Base64 Decoder" /><published>2023-05-19T00:00:00+09:00</published><updated>2023-05-19T14:58:50+09:00</updated><id>http://localhost:4000/categories/algorithm/algorithm-SWEA_1928</id><content type="html" xml:base="http://localhost:4000/categories/algorithm/2023-05-19-algorithm-SWEA_1928/"><![CDATA[<blockquote>
  <p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PR4DKAG0DFAUq">https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PR4DKAG0DFAUq</a></p>
</blockquote>

<h3 id="문제-해결-과정">문제 해결 과정</h3>
<hr />
<p><strong>문제 해석</strong></p>
<ul>
  <li>이 부분은 문제에 대한 이해가 가지 않아 <em>최준아_0847231님</em>의 댓글을 참고했다.</li>
</ul>

<blockquote>
  <p>문제요약</p>
  <ol>
    <li>표1을 보고 입력받은 문자들을 각각 대응하는 숫자로 변경한다.</li>
    <li>각 숫자들을 6자리 이진수로 표현하고, 이 이진수들을 한 줄로 쭉 이어 붙인다.</li>
    <li>한 줄로 쭉 이어붙인 이진수들을 8자리씩 끊어서 십진수로 바꾼다.</li>
    <li>각각의 십진수를 아스키 코드로 변환한다.</li>
  </ol>
</blockquote>

<p><strong>접근 방식</strong></p>
<ul>
  <li>
    <p>문제가 어렵다기보다는 아스키 코드를 활용할 수 없다면 풀 수가 없는 문제였다.</p>

    <p><a href="https://hunnibs.github.io/categories/study/2023-05-03-algorithmStudy-ascii/">[기본 지식] Ascii Code</a> 해당 포스트 내용 참조</p>
  </li>
</ul>

<h3 id="풀이-코드">풀이 코드</h3>
<hr />

<p><strong>코드 구성 설명</strong></p>
<ol>
  <li>주어진 문자열에서 문자 하나하나 당 아스키코드 변환식을 통해 자연수로 바꿔준다.</li>
  <li>바꿔준 자연수를 decoding(num) 함수에 넣어 이진수로 변환해준다.</li>
  <li>전부 이진수로 변환했다면 translate(sum) 함수에 넣어 8자리씩 슬라이스를 이용해 끊어준 뒤, 다시 정수로 변환시켜준다.</li>
  <li>정수로 변환시켜주고 아스키코드 변환을 이용해 다시 문자열로 변환해준다.</li>
  <li>3~4 과정을 끝까지 반복하면 완전한 문장이 완성된다.</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    def decoding(num):
        decode = ''
        for i in range(5, -1, -1):
            if num - (2**i) &gt;= 0:
                decode += '1'
                num = num - (2**i)
            else:
                decode += '0'

        return decode

    def translate(sum):
        result = ''

        a = len(sum) // 8
        for i in range(a):
            b = i * 8
            tmp = sum[b:b+8]

            num = 0
            i = 7
            for t in tmp:
                t = int(t)
                num += t * (2**i)
                i -= 1

            result += chr(num)
        return result

    # input
    T = int(input())
    for t in range(1, T+1):
        base = input()
        sum = ''

    # main
        for word in base:
            if 48 &lt;= ord(word) &lt;= 57:
                num = ord(word)+4
                sum += decoding(num)

            elif 65 &lt;= ord(word) &lt;= 90:
                num = ord(word)-65
                sum += decoding(num)

            elif 97 &lt;= ord(word) &lt;= 122:
                num = ord(word)-71
                sum += decoding(num)

            elif word == '+':
                num = 62
                sum += decoding(num)

            else:
                num = 63
                sum += decoding(num)
        
        result = translate(sum)
        
        print('#' + str(t), result)

</code></pre></div></div>

<h3 id="문제풀이-후기">문제풀이 후기</h3>
<hr />
<p>오랜만에 풀어보는 재밌는 문제였던 것 같다. 알고리즘을 푼다는 생각보다는 암호해석을 하는 듯 하여 재밌었다. 문제 자체의 난이도는 높지 않은 것 같으나 본인도 아스키코드 표를 참조하지 않고는 풀기가 힘들었던 문제였다. 그만큼 아스키 코드에 대해 다 외우고 있지 못한다면 풀기 어려운 문제라고 생각한다.</p>

<p>총 소요시간: 0H 30M</p>]]></content><author><name>&lt;Lee&gt; &lt;ByungHeon&gt;</name><email>&lt;cqqudgjs@hufs.ac.kr&gt;</email></author><category term="categories" /><category term="algorithm" /><summary type="html"><![CDATA["구현 문제(Ascii code표 활용)"]]></summary></entry><entry><title type="html">[SWEA] 1244_최대상금</title><link href="http://localhost:4000/categories/algorithm/2023-05-17-algorithm-SWEA_1244/" rel="alternate" type="text/html" title="[SWEA] 1244_최대상금" /><published>2023-05-17T00:00:00+09:00</published><updated>2023-05-18T11:18:43+09:00</updated><id>http://localhost:4000/categories/algorithm/algorithm-SWEA_1244</id><content type="html" xml:base="http://localhost:4000/categories/algorithm/2023-05-17-algorithm-SWEA_1244/"><![CDATA[<blockquote>
  <p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?problemLevel=2&amp;problemLevel=3&amp;contestProbId=AV15Khn6AN0CFAYD&amp;categoryId=AV15Khn6AN0CFAYD&amp;categoryType=CODE&amp;problemTitle=&amp;orderBy=RECOMMEND_COUNT&amp;selectCodeLang=ALL&amp;select-1=3&amp;pageSize=10&amp;pageIndex=1">https://swexpertacademy.com/main/code/problem/problemDetail.do?problemLevel=2&amp;problemLevel=3&amp;contestProbId=AV15Khn6AN0CFAYD&amp;categoryId=AV15Khn6AN0CFAYD&amp;categoryType=CODE&amp;problemTitle=&amp;orderBy=RECOMMEND_COUNT&amp;selectCodeLang=ALL&amp;select-1=3&amp;pageSize=10&amp;pageIndex=1</a></p>
</blockquote>

<h3 id="문제-해결-과정">문제 해결 과정</h3>
<hr />
<p><strong>문제 해석</strong></p>
<ul>
  <li>정해진 횟수만큼 두 숫자의 위치를 바꿨을 때(중복 가능), 가장 큰 숫자가 나와야한다.</li>
</ul>

<p><strong>접근 방식</strong></p>
<ul>
  <li>
    <p>Greedy 알고리즘 활용(잘못된 접근)</p>

    <p>매 번 최선의 선택을 하면 결과값이 최선일거라는 실수를 저질렀다. greedy 방식의 경우는 최적의 선택들을 계속 한다해서 결과가 최적이라는 보장이 없다는 것을 공부할 때 정리하고도 문제를 풀 때 생각없이 사용했다.</p>

    <p><a href="https://hunnibs.github.io/categories/study/2023-04-20-algorithmStudy-Greedy/">[알고리즘] Greedy 알고리즘</a> 해당 포스트 내용 참조</p>
  </li>
</ul>

<blockquote>
  <p>조건을 다시 생각</p>
  <ol>
    <li>max값을 가장 맨 앞에 오게 하는 것이 최대가 되게 하는 방식</li>
    <li>max값이 여러개라면? 일일히 탐색해보며 결과가 가장 최대가 될 때를 고르자</li>
  </ol>

  <p>해당 문제는 최대 6자리 교환횟수 10번 이내이므로 DFS 알고리즘과 브루트포스 알고리즘을 함께 사용해 모든 경우를 다 탐색해봐도 가능할 것이라고 생각했다.</p>
</blockquote>

<ul>
  <li>
    <p>Queue를 활용한 DFS 알고리즘 활용(잘못된 접근)</p>

    <p>max 값을 가장 앞으로 이동시켰을 때 popleft를 통해 제거해준다면 시간복잡도가 더 단순해질 것으로 생각했다. 하지만 여러가지 조건들을 추가하다보니 재귀문에서 돌아올 때 제거했던 값을 다시 넣어주는 것이 너무 복잡했고 계속해서 index error가 발생해서 포기했다.</p>
  </li>
  <li>
    <p>DFS 알고리즘 활용(실제 풀이)</p>

    <p>시간이 오래걸리더라도 가장 깔끔하게 답을 구할 수 있는 방식으로 조건이 까다로운 부분만 해결하면 문제없이 구현할 수 있었다.</p>
  </li>
</ul>

<h3 id="풀이-코드">풀이 코드</h3>
<hr />

<ul>
  <li>코드가 매우 난잡해 최대한 주석을 달아 설명하려함</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    # cnt는 남은 반복 횟수, 0 ~ C는 이미 정렬된 숫자를 의미한다. 즉, C는 이제 가장 큰 숫자가 와야하는 index값
    def sol(cnt, C):
        # 해당 조건문은 깊이가 최대에 달했을 때를 처리
        if cnt == 0:
            tmp = []
            for i in range(len(answer)):
                tmp.append(str(answer[i]))
            for i in range(C, len(nums)):
                tmp.append(str(nums[i]))

            result.append(''.join(tmp))

            return

        # 해당 루프문은 만약 가장 큰 숫자가 가장 앞에 있는 경우는 변경할 필요가 없어 처리해줌
        while max(nums) == nums[C]:
            answer.append(nums[C])
            nums[C] = -1
            C += 1

            if C == len(nums):
                break

        # cnt는 남았는데 이미 최대금액으로 정렬된 경우
        if C == len(nums):
            if cnt % 2 == 0 or status:  
            # 중복되는 숫자가 있다면 그 숫자들만 자리를 바꿔주거나 
            # or 중복되지않아도 남은 횟수가 짝수면 다시 원래대로 돌려놓을 수 있다.
                tmp = []
                for i in range(len(answer)):
                    tmp.append(str(answer[i]))
                result.append(''.join(tmp))
            # 자리를 바꿔줘야하는 경우
            else:
                tmp = answer[-1]
                answer[-1] = answer[-2]
                answer[-2] = tmp
                tmp = []
                for i in range(len(answer)):
                    tmp.append(str(answer[i]))
                result.append(''.join(tmp))

            return

        maxNum = max(nums)

        # DFS 동작 코드
        for i in range(len(nums)):
            if nums[i] == maxNum:
                nums[i] = nums[C]
                nums[C] = -1
                answer.append(maxNum)
                sol(cnt-1, C+1)
                answer.pop()
                nums[C] = nums[i]
                nums[i] = maxNum

    # input
    T = int(input())
    for t in range(1, T+1):
        result = []
        answer = []

        nums, cnt = input().split(' ')

    # main
        cnt = int(cnt)
        nums = list(nums)
        for i in range(len(nums)):
            nums[i] = int(nums[i])

        status = 0
        # 중복 Status
        if len(set(nums)) != len(nums):
            status = 1

        sol(cnt, 0)

        ans = 0
        while not ans:
            if len(max(result)) != len(nums):
                result[result.index(max(result))] = ''
            else:
                ans = max(result)

        print('#' + str(t), ans)

</code></pre></div></div>

<h3 id="문제풀이-후기">문제풀이 후기</h3>
<hr />
<p>체감 상 굉장히 까다로운 문제였다. 조건이 많고 시간과 공간복잡도를 생각했을 때 섣불리 코드를 짜기가 어려워 줄이려고 노력하다가 시간이 오래걸렸던 것 같다. 느꼈던 건 뭔가 구현문제에 가까웠던 것 같다.</p>

<p>총 소요시간: 3H</p>]]></content><author><name>&lt;Lee&gt; &lt;ByungHeon&gt;</name><email>&lt;cqqudgjs@hufs.ac.kr&gt;</email></author><category term="categories" /><category term="algorithm" /><summary type="html"><![CDATA["구현 문제"]]></summary></entry><entry><title type="html">[SWEA] 1859_백만 장자 프로젝트</title><link href="http://localhost:4000/categories/algorithm/2023-05-15-algorithm-SWEA_1859/" rel="alternate" type="text/html" title="[SWEA] 1859_백만 장자 프로젝트" /><published>2023-05-15T00:00:00+09:00</published><updated>2023-05-18T11:18:18+09:00</updated><id>http://localhost:4000/categories/algorithm/algorithm-SWEA_1859</id><content type="html" xml:base="http://localhost:4000/categories/algorithm/2023-05-15-algorithm-SWEA_1859/"><![CDATA[<blockquote>
  <p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?problemLevel=2&amp;contestProbId=AV5LrsUaDxcDFAXc&amp;categoryId=AV5LrsUaDxcDFAXc&amp;categoryType=CODE&amp;problemTitle=&amp;orderBy=RECOMMEND_COUNT&amp;selectCodeLang=ALL&amp;select-1=2&amp;pageSize=10&amp;pageIndex=1">https://swexpertacademy.com/main/code/problem/problemDetail.do?problemLevel=2&amp;contestProbId=AV5LrsUaDxcDFAXc&amp;categoryId=AV5LrsUaDxcDFAXc&amp;categoryType=CODE&amp;problemTitle=&amp;orderBy=RECOMMEND_COUNT&amp;selectCodeLang=ALL&amp;select-1=2&amp;pageSize=10&amp;pageIndex=1</a></p>
</blockquote>

<h3 id="문제-해결-과정">문제 해결 과정</h3>
<hr />
<p><strong>문제 해석</strong></p>
<ul>
  <li>N일 동안의 매매가가 각각 주어졌을 때 저점에 매수해 고점에 파는 것을 반복해 최대 이익을 구하는 것</li>
</ul>

<p><strong>접근 방식</strong></p>
<ol>
  <li>
    <p>이중 for문을 이용한 간단한 구현 방식(Time Error)</p>

    <p>1일차부터 N-1일차까지 뒤 전부를 돌며 가장 고점에 판매하는 방식으로 구현만 가능할 뿐 시간복잡도가 O(n^2)으로 복잡한 편이다.</p>
  </li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    import sys

    # input
    input = sys.stdin.readline

    T = int(input())

    for t in range(1, T+1):
        N = int(input())
        value = list(map(int, input().split()))
        result = 0
        for i in range(N-1):
            tmp = 0
            for j in range(i+1, N):
                if value[i] &lt; value[j]:
                    tmp = max(tmp, value[j]-value[i])
            result += tmp

        print('#' + str(t), result)

</code></pre></div></div>

<ol>
  <li>
    <p>max값을 이용한 구현 방식</p>

    <ul>
      <li>매매가 정보가 리스트로 주어졌을 때 가장 고점인 날을 구한다.</li>
      <li>가장 고점인 날을 high라고 했을 때, 1일차부터 high-1일차까지는 전부 매수하고 high에서 전부 매도한다.</li>
      <li>큐의 특성을 이용해 1일차부터 순서대로 나아가면서 리스트에서 없애준다.</li>
      <li>계속해서 하락장인 경우 O(N^2)까지 증가할 수 있으나 O(N)에 보통 해결 가능하다.</li>
    </ul>
  </li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    import sys
    from collections import deque

    # input
    input = sys.stdin.readline

    T = int(input())

    for t in range(1, T+1):
        N = int(input())
        value = list(map(int, input().split()))

        value = deque(value)
        answer = 0
        while value:
            high = max(value)
            idx = value.index(high)
            for _ in range(idx):
                answer += (high - value.popleft())
            value.popleft()

        print('#' + str(t), answer)

</code></pre></div></div>

<h3 id="문제-풀이-후기">문제 풀이 후기</h3>
<hr />
<p>시간복잡도 생각 안하고 풀지말고 따져보면서 효율적인 코드 작성하려고 노력하자</p>

<p>총 소요시간: 0H 30M</p>]]></content><author><name>&lt;Lee&gt; &lt;ByungHeon&gt;</name><email>&lt;cqqudgjs@hufs.ac.kr&gt;</email></author><category term="categories" /><category term="algorithm" /><summary type="html"><![CDATA["구현 문제(큐 활용)"]]></summary></entry><entry><title type="html">[BOJ] 1238_파티</title><link href="http://localhost:4000/categories/algorithm/2023-05-09-algorithm-BOJ_1238/" rel="alternate" type="text/html" title="[BOJ] 1238_파티" /><published>2023-05-09T00:00:00+09:00</published><updated>2023-05-18T11:17:45+09:00</updated><id>http://localhost:4000/categories/algorithm/algorithm-BOJ_1238</id><content type="html" xml:base="http://localhost:4000/categories/algorithm/2023-05-09-algorithm-BOJ_1238/"><![CDATA[<blockquote>
  <p><a href="https://www.acmicpc.net/problem/1238">https://www.acmicpc.net/problem/1238</a></p>
</blockquote>

<h3 id="문제-해결-과정">문제 해결 과정</h3>
<hr />
<p><strong>문제 해석</strong></p>
<ul>
  <li>각 노드를 출발해 정해진 노드에 방문하고 다시 출발 노드로 되돌아오는 최단경로를 구하는 문제</li>
</ul>

<p><strong>접근 방식</strong></p>
<ul>
  <li>최단경로 문제 풀이 방식은 정해져있음</li>
  <li>최단경로를 구할 때 그래프에 <strong>가중치</strong>가 정해져있다면 BFS가 아닌 Dijkstra 알고리즘을 활용 <br />
<a href="https://hunnibs.github.io/categories/study/2023-04-25-algorithmStudy-dijkstra/">[알고리즘] 다익스트라 알고리즘</a> 해당 포스트 내용 참조</li>
  <li>해당 구분만 하면 다익스트라 알고리즘만 구현하면 문제 풀이는 끝</li>
</ul>

<p>단, 해당 문제는 목표노드에 도달하면 끝나는 것이 아니라 다시 출발 노드로 돌아와야하므로 조건을 추가해야한다.</p>
<ul>
  <li>목표 노드 X를 출발점으로 잡고 해당 노드에서 다른 노드까지의 최단경로를 저장해준 리스트를 만들어준다.</li>
  <li>목표 노드를 제외한 나머지 노드들부터 목표 노드까지 최단경로를 찾아준다.</li>
  <li>기존에 구했던 목표노드부터 출발노드까지의 최단경로와 방금 구한 목표노드까지의 최단경로를 더해서 각 노드 별로 저장해준다.</li>
  <li>각 노드 당 목표노드를 들렀다 복귀하는 최단경로가 저장된 리스트를 얻을 수 있다.</li>
  <li>이 중 최대값이 해당 문제에서 요구하는 정답이다.</li>
</ul>

<h3 id="풀이-코드">풀이 코드</h3>
<hr />

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    import heapq
    import sys
    from math import inf

    def dijkstra(i, shortPath):
        heap = []
        heapq.heappush(heap, (0, i))
        while heap:
            currentW, currentV = heapq.heappop(heap)

            for nextV, w in graph[currentV]:
                nextW = currentW + w
                if shortPath[nextV] &gt; nextW:
                    shortPath[nextV] = nextW
                    heapq.heappush(heap, (nextW, nextV))

        return shortPath

    # input
    input = sys.stdin.readline

    N, M, X = map(int, input().split())

    graph = [[] for _ in range(N+1)]
    for _ in range(M):
        u, v, w = map(int, input().split())
        graph[u].append([v, w])

    # main
    result = [0 for _ in range(N+1)]

    shortPathX = [inf for _ in range(N+1)]
    shortPathX[X] = 0
    shortPathX = dijkstra(X, shortPathX)

    for i in range(1, N+1):
        if i == X:
            continue

        shortPath = [inf for _ in range(N+1)]
        shortPath[i] = 0
        shortPath = dijkstra(i, shortPath)
        result[i] = shortPath[X] + shortPathX[i]

    print(max(result))

</code></pre></div></div>

<ul>
  <li>자세한 다익스트라 구현 방식은 남겨둔 포스트를 참조할 것</li>
</ul>

<h3 id="문제-풀이-후기">문제 풀이 후기</h3>
<hr />
<p>아직은 Dijkstra 알고리즘 사용이 익숙하지 않고 Heap을 자유롭게 사용하지 못해 포스트 내용을 참조해서 문제를 풀어야했다. 그래도 문제를 보고 어떤 알고리즘을 써야할지 빠르게 파악했다는 점에 공부가 되고있다는 생각이 들었던 문제였던 것 같다.</p>

<p>총 소요시간: 0H 45M</p>]]></content><author><name>&lt;Lee&gt; &lt;ByungHeon&gt;</name><email>&lt;cqqudgjs@hufs.ac.kr&gt;</email></author><category term="categories" /><category term="algorithm" /><summary type="html"><![CDATA["다익스트라 활용 문제"]]></summary></entry></feed>